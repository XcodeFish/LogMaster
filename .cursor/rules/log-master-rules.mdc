---
description:
globs:
alwaysApply: true
---
# Log-Master Cursor 规范约束

## 编码风格
- 使用 2 个空格缩进，不允许使用制表符
- 限制行宽 100 个字符
- 使用单引号 `'` 而非双引号 `"`（模板字符串除外）
- 语句末尾必须使用分号 `;`
- 大括号与语句同行
- 运算符两侧和逗号后添加空格
- 代码块始终使用大括号，即使只有一行代码

## 命名约定
- 变量：小驼峰式 (camelCase)，如 `logLevel`, `userConfig`
- 常量：全大写，下划线分隔，如 `MAX_LOG_SIZE`, `DEFAULT_THEME`
- 函数：小驼峰式 (camelCase)，如 `formatMessage()`, `setLogLevel()`
- 类：大驼峰式 (PascalCase)，如 `LogMaster`, `FileTransport`
- 接口：大驼峰式，可使用 I 前缀，如 `Transport`, `ILogOptions`
- 私有属性和方法：使用下划线前缀，如 `_privateConfig`, `_formatMessage()`
- 文件名：小写，连字符分隔，如 `log-formatter.js`, `file-transport.js`
- 类文件：大驼峰式，如 `LogMaster.js`, `FileTransport.js`

## 文件组织
- 导入顺序：标准库 → 第三方库 → 本地模块，每组之间留空行
- 优先使用命名导出而非默认导出
- 文件结构顺序：导入语句 → 常量和类型定义 → 辅助函数 → 主要类/函数定义 → 导出语句
- 遵循项目目录结构规范，保持模块职责清晰分离

## 代码质量
- 避免在循环中创建函数
- 优先使用 `const`，其次是 `let`，避免使用 `var`
- 及时清理不再需要的大型对象，避免内存泄漏
- 所有外部输入必须进行验证
- 不在日志中记录密码、令牌等敏感信息

## 文档与注释
- 每个文件顶部必须包含标准注释头
- 公共 API 必须使用 JSDoc 风格注释
- 复杂逻辑前使用行内注释解释"为什么"而不仅是"是什么"
- 注释与代码之间使用一个空格

## 测试要求
- 测试文件应与被测试的源文件结构相匹配
- 测试文件名以 `.spec.js` 或 `.test.js` 结尾
- 测试描述必须清晰表达测试意图
- 测试应遵循 AAA (Arrange-Act-Assert) 模式

## 项目特定规范
- 核心版本必须保持零依赖设计
- 各模块必须按照定义的职责分离
- 所有日志相关代码必须遵循环境感知设计原则
- 传输模块必须实现标准接口
- 扩展功能应设计为可选，不增加核心包体积
- 生产环境代码必须考虑敏感信息处理

## 版本管理
- 功能开发必须在特性分支 (`feature/name`) 进行
- 发布前必须更新 `CHANGELOG.md`
- 所有 PR 必须有描述性标题和详细说明
- 代码提交前必须通过所有测试和代码规范检查
